{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","toast","error","connectWallet","success","disconnectWallet","onInputChange","event","value","target","getProgram","Program","fetchIdl","getProvider","idl","getGifList","program","account","fetch","connection","Connection","Provider","createGifAccount","provider","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","sendGif","length","useEffect","onLoad","addEventListener","removeEventListener","className","toastOptions","duration","style","border","padding","color","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bef7139.chunk.js","sourcesContent":["//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport kp from './keypair.json'\n\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\nconst programID = new PublicKey(\"72z5anaRG11E11uWemh8Ucer9gz23jiCaSPew4q938dR\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"GIF Sent!\");\n\n  //ACTIONS\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      \n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue(\"\");\n      showGifSentToast();\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        SIGN IN\n      </button>\n      <p className=\"header\">Scene Portal</p>\n      <p className=\"sub-header\">Your favorite scenes, on the blockchain</p>\n      <div className=\"moon\" />\n      <div className=\"kiki\" />\n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <p className=\"connected-header\">SCENE PORTAL</p>\n          <button\n            className=\"cta-button disconnect-wallet-button\"\n            onClick={disconnectWallet}\n          >\n            SIGN OUT\n          </button>\n          <form\n            className=\"form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"post your favorite film/tv scene\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img className=\"gif-image\" src={item.gifLink}  alt ={item.gifLink}/>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  //useEFFECTS\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}