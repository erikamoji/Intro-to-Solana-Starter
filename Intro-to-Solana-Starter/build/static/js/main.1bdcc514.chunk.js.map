{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","toast","error","connectWallet","success","disconnectWallet","onInputChange","event","value","target","getProgram","Program","fetchIdl","getProvider","idl","connection","Connection","Provider","createGifAccount","provider","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","account","fetch","sendGif","length","addGif","useEffect","onLoad","addEventListener","removeEventListener","className","toastOptions","duration","style","border","padding","color","Navbar","Container","Brand","href","Toggle","Collapse","Text","onClick","address","substring","map","item","index","fontSize","width","height","gifLink","onSubmit","preventDefault","type","placeholder","onChange","renderConnectedContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bdcc514.chunk.js","sourcesContent":["//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\nimport Barcode from 'react-barcode';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\n\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(\"72z5anaRG11E11uWemh8Ucer9gz23jiCaSPew4q938dR\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [inputValue2, setInputValue2] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"GIF Sent!\");\n\n  //ACTIONS\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const shortenAddress = (address) => {\n    if (!address) return \"\";\n    return address.substring(0, 4) + \".....\" + address.substring(40);\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n      showGifSentToast();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <Navbar>\n      <Container>\n      <Navbar.Brand href=\"#home\"><p className=\"header\">CODE128</p></Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Navbar.Text>\n          <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        SIGN IN\n      </button>\n          </Navbar.Text>\n        </Navbar.Collapse>\n        </Container></Navbar>\n      \n      <p className=\"sub-header\">Turn your barcodes into blocks</p>\n      <div className=\"moon\" />\n      <div className=\"kiki\" />\n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <p className=\"connected-header\">WELCOME {shortenAddress(walletAddress)}</p>\n          \n          <button\n            className=\"cta-button disconnect-wallet-button\"\n            onClick={disconnectWallet}\n          >\n            SIGN OUT\n          </button>\n          \n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                  <Barcode fontSize={15} width={1} height={50} value={item.gifLink} />\n              </div>\n            ))}\n          </div>\n          <form\n            className=\"form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"enter in your loyalty card number\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              SUBMIT\n            </button>\n          </form>\n        </div>\n      );\n    }\n  };\n\n  //useEFFECTS\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}