[{"/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/index.js":"1","/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/App.js":"2","/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/Carousel.js":"3","/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/Marquee.js":"4"},{"size":219,"mtime":1664125200660,"results":"5","hashOfConfig":"6"},{"size":9173,"mtime":1664707882667,"results":"7","hashOfConfig":"6"},{"size":1417,"mtime":1664686807867,"results":"8","hashOfConfig":"6"},{"size":3434,"mtime":1664633755985,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1sa4raj",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/index.js",[],["20","21"],"/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/App.js",["22","23","24"],"//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\n// JSBarcode wrapped in React\nimport Barcode from \"react-barcode\";\n\n// Toast Notifs\nimport toast, { Toaster } from \"react-hot-toast\";\n\n// My new components\nimport Carousel from \"./Carousel\";\nimport \"./Carousel.css\";\nimport Marquee from \"./Marquee\";\nimport authpage from \"./assets/authpage.gif\";\n\n// Main CSS\nimport \"./App.css\";\n\n// Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// Bootstrap Bundle JS\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(\"72z5anaRG11E11uWemh8Ucer9gz23jiCaSPew4q938dR\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"Barcode submitted!\");\n\n  //ACTIONS\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const shortenAddress = (address) => {\n    if (!address) return \"\";\n    return address.substring(0, 4) + \".....\" + address.substring(40);\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No barcode given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Barcode:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Barcode successfully sent to program\", inputValue);\n\n      await getGifList();\n      showGifSentToast();\n    } catch (error) {\n      console.log(\"Error sending Barcode:\", error);\n    }\n  };\n\n  const Card = ({ title, content }) => (\n    <div className=\"card\">\n      <h2>{title}</h2>\n      {content}\n    </div>\n  );\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <nav className=\"navbar fixed-top navbar-expand-lg\">\n        <div className=\"container-fluid\">\n          <p className=\"header\" href=\"#\">\n            CODE128\n          </p>\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWallet}\n          >\n            CONNECT WALLET\n          </button>\n        </div>\n      </nav>\n      <div className=\"d-flex justify-content-center sub-header\">\n        <h1>your memberships, your data, on chain</h1>\n      </div>\n      <Marquee />\n      \n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"container connected-container\">\n            <nav className=\"navbar fixed-top navbar-expand-lg\">\n              <div className=\"container-fluid\">\n                <p className=\"header\">CODE128</p>\n                <button\n                  className=\"cta-button submit-gif-button\"\n                  onClick={createGifAccount}\n                >\n                  CREATE A NEW KEYCHAIN\n                </button>\n              </div>\n            </nav>\n            <div className=\"img-flex\"><img className=\"img-fluid\" alt=\"Auth Page Landing\" src={authpage} /></div>\n          </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <nav className=\"navbar fixed-top navbar-expand-lg\">\n            <div className=\"container-fluid\">\n              <p className=\"header\">HELLO, {shortenAddress(walletAddress)}</p>\n              <button\n                className=\"cta-button disconnect-wallet-button\"\n                onClick={disconnectWallet}\n              >\n                SIGN OUT\n              </button>\n            </div>\n          </nav>\n          <nav className=\"navbar form-inline fixed-bottom\">\n            <form\n              className=\"form\"\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"enter in your loyalty card number\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                SUBMIT\n              </button>\n            </form>\n          </nav>\n          <Carousel>\n            {gifList.map((item, index) => (\n              <Card\n                title={\"CARD \" + (index + 1)}\n                content={\n                  <div key={index}>\n                    <Barcode\n                      width={1}\n                      fontSize={13}\n                      format={\"CODE128\"}\n                      value={item.gifLink}\n                    />\n                  </div>\n                }\n              />\n            ))}\n          </Carousel>\n        </div>\n      );\n    }\n  };\n\n  //useEFFECTS\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/Carousel.js",[],"/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/Marquee.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":29,"column":24,"nodeType":"31","messageId":"32","endLine":29,"endColumn":31},{"ruleId":"33","severity":1,"message":"34","line":295,"column":6,"nodeType":"35","endLine":295,"endColumn":8,"suggestions":"36"},{"ruleId":"33","severity":1,"message":"37","line":304,"column":6,"nodeType":"35","endLine":304,"endColumn":21,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'Keypair' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkIfWalletIsConnected'. Either include it or remove the dependency array.","ArrayExpression",["41"],"React Hook useEffect has a missing dependency: 'getGifList'. Either include it or remove the dependency array.",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},"Update the dependencies array to be: [checkIfWalletIsConnected]",{"range":"47","text":"48"},"Update the dependencies array to be: [getGifList, walletAddress]",{"range":"49","text":"50"},[8390,8392],"[checkIfWalletIsConnected]",[8551,8566],"[getGifList, walletAddress]"]