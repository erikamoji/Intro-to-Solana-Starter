{"ast":null,"code":"var _jsxFileName = \"/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/App.js\",\n    _s = $RefreshSig$();\n\n//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\"; // JSBarcode wrapped in React\n\nimport Barcode from \"react-barcode\"; // Toast Notifs\n\nimport toast, { Toaster } from \"react-hot-toast\"; // My new components\n\nimport Carousel from \"./Carousel\";\nimport \"./Carousel.css\";\nimport Marquee from \"./Marquee\";\nimport authpage from \"./assets/authpage.gif\"; // Main CSS\n\nimport \"./App.css\"; // Bootstrap CSS\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // Bootstrap Bundle JS\n\nimport \"bootstrap/dist/js/bootstrap.bundle.min\"; //CONSTANTS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3;\n/*\n\nuncomment the 3 below lines if you want the users to share one baseAccount\n i've tested it and it works\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n*/\n// this creates a new account every time the user refreshes the app\n\nlet baseAccount = Keypair.generate();\nconst programID = new PublicKey(\"D4qTif2KUt5cKot4RVn1kSxPiXaryKvBJDWbuBLsVybL\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\"\n};\n\nconst App = () => {\n  _s();\n\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]); //TOASTS\n\n  const showPhantomToast = () => toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n\n  const showGifSentToast = () => toast.success(\"Barcode submitted!\"); //ACTIONS\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const shortenAddress = address => {\n    if (!address) return \"\";\n    return address.substring(0, 4) + \".....\" + address.substring(40);\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No barcode given!\");\n      return;\n    }\n\n    setInputValue(\"\");\n    console.log(\"Barcode:\", inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Barcode successfully sent to program\", inputValue);\n      await getGifList();\n      showGifSentToast();\n    } catch (error) {\n      console.log(\"Error sending Barcode:\", error);\n    }\n  };\n\n  const Card = _ref => {\n    let {\n      title,\n      content\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }, this);\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar fixed-top navbar-expand-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          href: \"#\",\n          children: \"CODE128\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWallet,\n          children: \"CONNECT WALLET\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center sub-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"your memberships, your data, on chain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Marquee, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jumbotron-fluid auth-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"\",\n            alt: \"Auth Page Landing\",\n            src: authpage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n          className: \"navbar fixed-top navbar-expand-lg\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-fluid\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"header\",\n              children: \"CODE128\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cta-button submit-gif-button\",\n              onClick: createGifAccount,\n              children: \"CREATE A NEW KEYCHAIN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n          className: \"navbar fixed-top navbar-expand-lg\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-fluid\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"header\",\n              children: [\"HELLO, \", shortenAddress(walletAddress)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cta-button disconnect-wallet-button\",\n              onClick: disconnectWallet,\n              children: \"SIGN OUT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n          className: \"navbar form-inline fixed-bottom\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form\",\n            onSubmit: event => {\n              event.preventDefault();\n              sendGif();\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"enter in your loyalty card number\",\n              value: inputValue,\n              onChange: onInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"cta-button submit-gif-button\",\n              children: \"SUBMIT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Carousel, {\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(Card, {\n            title: \"CARD \" + (index + 1),\n            content: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\",\n              children: /*#__PURE__*/_jsxDEV(Barcode, {\n                width: 1,\n                fontSize: 13,\n                format: \"CODE128\",\n                value: item.gifLink\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this);\n    }\n  }; //useEFFECTS\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\"); // Call Solana program here.\n\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Toaster, {\n        toastOptions: {\n          className: \"\",\n          duration: 3000,\n          style: {\n            border: \"1px solid #713200\",\n            padding: \"16px\",\n            color: \"#713200\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [!walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"o3x4z0frUQsAtyviY0jM4udbKEc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","idl","kp","Barcode","toast","Toaster","Carousel","Marquee","authpage","SystemProgram","Keypair","baseAccount","generate","programID","network","opts","preflightCommitment","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","showPhantomToast","showConnectedWalletToast","success","showDisconnectedWalletToast","showGifSentToast","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","error","connectWallet","disconnectWallet","onInputChange","event","value","target","getProgram","fetchIdl","getProvider","connection","provider","createGifAccount","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","shortenAddress","address","substring","account","fetch","sendGif","length","addGif","Card","title","content","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","item","index","gifLink","onLoad","addEventListener","removeEventListener","className","duration","style","border","padding","color"],"sources":["/Users/xavierjones/solana-camp/sceneportal/Intro-to-Solana-Starter/src/App.js"],"sourcesContent":["//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\n// JSBarcode wrapped in React\nimport Barcode from \"react-barcode\";\n\n// Toast Notifs\nimport toast, { Toaster } from \"react-hot-toast\";\n\n// My new components\nimport Carousel from \"./Carousel\";\nimport \"./Carousel.css\";\nimport Marquee from \"./Marquee\";\nimport authpage from \"./assets/authpage.gif\";\n\n// Main CSS\nimport \"./App.css\";\n\n// Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// Bootstrap Bundle JS\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\n\n/*\n\nuncomment the 3 below lines if you want the users to share one baseAccount\n i've tested it and it works\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n*/\n\n// this creates a new account every time the user refreshes the app\nlet baseAccount = Keypair.generate();\n\nconst programID = new PublicKey(\"D4qTif2KUt5cKot4RVn1kSxPiXaryKvBJDWbuBLsVybL\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"Barcode submitted!\");\n\n  //ACTIONS\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const shortenAddress = (address) => {\n    if (!address) return \"\";\n    return address.substring(0, 4) + \".....\" + address.substring(40);\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No barcode given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Barcode:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Barcode successfully sent to program\", inputValue);\n\n      await getGifList();\n      showGifSentToast();\n    } catch (error) {\n      console.log(\"Error sending Barcode:\", error);\n    }\n  };\n\n  const Card = ({ title, content }) => (\n    <div className=\"card\">\n      <h2>{title}</h2>\n      <p>{content}</p>\n    </div>\n  );\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <nav className=\"navbar fixed-top navbar-expand-lg\">\n        <div className=\"container-fluid\">\n          <p className=\"header\" href=\"#\">\n            CODE128\n          </p>\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWallet}\n          >\n            CONNECT WALLET\n          </button>\n        </div>\n      </nav>\n      <div className=\"d-flex justify-content-center sub-header\">\n        <h1>your memberships, your data, on chain</h1>\n      </div>\n      <Marquee />\n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"container connected-container\">\n          <div className=\"jumbotron-fluid auth-wrapper\">\n            <img className=\"\" alt=\"Auth Page Landing\" src={authpage} />\n          </div>\n          <nav className=\"navbar fixed-top navbar-expand-lg\">\n            <div className=\"container-fluid\">\n              <p className=\"header\">CODE128</p>\n              <button\n                className=\"cta-button submit-gif-button\"\n                onClick={createGifAccount}\n              >\n                CREATE A NEW KEYCHAIN\n              </button>\n            </div>\n          </nav>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <nav className=\"navbar fixed-top navbar-expand-lg\">\n            <div className=\"container-fluid\">\n              <p className=\"header\">HELLO, {shortenAddress(walletAddress)}</p>\n              <button\n                className=\"cta-button disconnect-wallet-button\"\n                onClick={disconnectWallet}\n              >\n                SIGN OUT\n              </button>\n            </div>\n          </nav>\n          <nav className=\"navbar form-inline fixed-bottom\">\n            <form\n              className=\"form\"\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"enter in your loyalty card number\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                SUBMIT\n              </button>\n            </form>\n          </nav>\n          <Carousel>\n            {gifList.map((item, index) => (\n              <Card\n                title={\"CARD \" + (index + 1)}\n                content={\n                  <div className=\"\" key={index}>\n                    <Barcode\n                      width={1}\n                      fontSize={13}\n                      format={\"CODE128\"}\n                      value={item.gifLink}\n                    />\n                  </div>\n                }\n              />\n            ))}\n          </Carousel>\n        </div>\n      );\n    }\n  };\n\n  //useEFFECTS\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}